## The Schizophrenia of Computing

Computer science is a branch of mathematics.
Computer engineering is a branch of electrical engineering.
Software engineering is a branch of sociology.
Balance the three if you can.

## Wisdom
"Any fool can write code that a computer can understand. Good programmers write code that humans can understand." Martin Fowler, 2008
"If you can't explain it, you don't understand it" - Bryan Catrill
"There is nothing more permanent than a temporary fix."
If you can't measure it, you can't change it!

## Clean Code

* Write code so the poor bastard after you doesn't curse your name.
* Code with intention.
* Explicit > Implicit
* Functional & Declarative > Imperative (i.e. what > how)
* Separation of concerns > tight coupling
* Composition > Inheritance (has-a vs. is-a). Limit inheritance.
* Polymorphism > Conditional
* Polymorphism != Code sharing (OOP does not require inheritance or abstract classes).
* Abstraction > Code grouping
* Clean code > needless optimization
* Caller > Callee. Don't push concerns into the callee.
* referential transparency (account for all inputs, all outputs including exceptions)
* small sharp tools (do one thing, and do it well)
* High signal to noise ratio.
* Separate structural changes from behavioral changes.
* Maintain locality of functionality.
* Develop personal craftsmanship. Never stop learning.

## Architecture

* Why -> What -> How. Domain defines implementation.
* Build heirarchies of systems. Webs are bad. Noodles aren't much better.
* Asynchronous first.
* Data > Code > Configuration > Convention
* Tests > Documentation
* Establish boundaries and surfaces. Create APIs.
* Choose the right tool, not just the tool you have.
* "First thing that compiles" is not an acceptable engineering decision.
* Actors > Objects (or rather, actors encapsulate better than objects.)
* Website is not an architecture
* Encapsulate state in state machines.
* Don't reinvent the wheel.

## Testing and Error handling

* Test around separation of concerns
* Test for behavior.
* Fail loud, fail fast
* Edge case handling > Make it go away
* Understanding how things work > sacrificing to the elder gods and hoping things happen
* test for stability
* Errors are a failure in the design or implementation of code. Exceptions are output of your function.
* Mocking is a smell that you have too many dependencies.

## Data

* Data > State. State is data that is variant over time.
* structured types > dynamic data
* explicit schema > implicit schema.
* Immutability > mutability.
* Data transforms > tickling
* Serialize at boundaries only.
* "You cannot promote derived data." - Kenrick White
* Null considered harmful. Use explicit definitions like Option to indicate "value may not be present".
* Objects and structures should be in a stable state once they leave the constructor.

## Concurrency

* Event-driven / Reactive > Explicit calls
* Asynchronous > Synchronous
* Can treat local as remote, but not vice versa.
* Share nothing.
* Time is a continuum.
* Communication > synchronized state
* Separate context of execution from behavior.
* Threads and processes are contexts of execution, not concurrency primitives.
